pipeline {
  agent any

  tools {
    maven 'Maven'
  }

  environment {
    SONAR_HOST_URL = 'http://sonarqube:9000'
    SONAR_TOKEN = credentials('sonar-token')
    DOCKER_IMAGE = 'dockrmatos/backend-app:latest'
  }

  stages {
    stage('Checkout') {
      steps {
        git url: 'https://github.com/rmatos-pg/proj.git', branch: 'main', credentialsId: 'JNK'
      }
    }

    stage('Build & Test') {
      steps {
        dir('backend') {
          sh 'mvn clean package -DskipTests'
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        dir('backend') {
          withSonarQubeEnv('SonarQube') {
            sh '''
              mvn sonar:sonar \
                -Dsonar.projectKey=backend \
                -Dsonar.host.url=$SONAR_HOST_URL \
                -Dsonar.login=$SONAR_TOKEN
            '''
          }
        }
      }
    }

    stage('Quality Gate') {
      steps {
        script {
          try {
            timeout(time: 2, unit: 'MINUTES') {
              waitForQualityGate abortPipeline: true
            }
          } catch (err) {
            echo "Quality Gate wait timed out (2 min). Continuing pipeline without abort."
          }
        }
      }
    }

    stage('Docker Build') {
      steps {
        script {
          docker.build(env.DOCKER_IMAGE, 'backend/.')
        }
      }
    }

    stage('Docker Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-hub-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
          sh "docker push ${env.DOCKER_IMAGE}"
        }
      }
    }

    stage('Deploy (local)') {
      steps {
        sh '''
          docker rm -f backend-app || true
          docker run -d --name backend-app -p 8082:8080 ${DOCKER_IMAGE}
        '''
      }
    }
  }
}
